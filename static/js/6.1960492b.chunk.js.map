{"version":3,"sources":["views/RegisterView.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"names":["styles","form","width","margin","header","textAlign","label","display","flexDirection","marginBottom","RegisterView","dispatch","useDispatch","useState","name","setName","email","setEmail","password","setPassword","handleChange","event","target","value","style","onSubmit","e","preventDefault","authOperations","register","autoComplete","type","onChange","variant","size","block","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","length","err","unsupportedIterableToArray","TypeError"],"mappings":"+OAKMA,EAAS,CACbC,KAAM,CACJC,MAAO,IACPC,OAAQ,QAEVC,OAAQ,CACNC,UAAW,UAEbC,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,aAAc,KAIH,SAASC,IACtB,IAAMC,EAAWC,cACjB,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAAAC,GACnB,MAAwBA,EAAMC,OAAtBR,EAAR,EAAQA,KAAMS,EAAd,EAAcA,MACd,OAAQT,GACN,IAAK,OACHC,EAAQQ,GACR,MACF,IAAK,QACHN,EAASM,GACT,MACF,IAAK,WACHJ,EAAYI,GACZ,MACF,QACE,SAaN,OACE,gCACE,oBAAIC,MAAOxB,EAAOI,OAAlB,iIAEA,uBAAMqB,SAbW,SAAAC,GACnBA,EAAEC,iBAEFhB,EAASiB,IAAeC,SAAS,CAAEf,OAAME,QAAOE,cAChDH,EAAQ,IACRI,EAAY,IACZF,EAAS,KAOuBO,MAAOxB,EAAOC,KAAM6B,aAAa,MAA/D,UACE,wBAAON,MAAOxB,EAAOM,MAArB,+BAEE,uBAAOyB,KAAK,OAAOjB,KAAK,OAAOS,MAAOT,EAAMkB,SAAUZ,OAExD,wBAAOI,MAAOxB,EAAOM,MAArB,2CAEE,uBACEyB,KAAK,QACLjB,KAAK,QACLS,MAAOP,EACPgB,SAAUZ,OAGd,wBAAOI,MAAOxB,EAAOM,MAArB,iDAEE,uBACEyB,KAAK,WACLjB,KAAK,WACLS,MAAOL,EACPc,SAAUZ,OAGd,cAAC,IAAD,CAAQa,QAAQ,YAAYC,KAAK,KAAKC,OAAK,EAACJ,KAAK,SAAjD,kI,8EC3EO,SAASK,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAG1B,QAETe,GAAKM,EAAKU,SAAWhB,GAH8CO,GAAK,IAK9E,MAAOU,GACPT,GAAK,EACLC,EAAKQ,EACL,QACA,IACOV,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAkB,EAAA,GAA2BnB,EAAKC,IGLjF,WACb,MAAM,IAAImB,UAAU,6IHIgF","file":"static/js/6.1960492b.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { authOperations } from '../redux/auth';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst styles = {\r\n  form: {\r\n    width: 320,\r\n    margin: 'auto',\r\n  },\r\n  header: {\r\n    textAlign: 'center',\r\n  },\r\n  label: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    marginBottom: 15,\r\n  },\r\n};\r\n\r\nexport default function RegisterView() {\r\n  const dispatch = useDispatch();\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'email':\r\n        setEmail(value);\r\n        break;\r\n      case 'password':\r\n        setPassword(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    dispatch(authOperations.register({ name, email, password }));\r\n    setName('');\r\n    setPassword('');\r\n    setEmail('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1 style={styles.header}>Страница регистрации</h1>\r\n\r\n      <form onSubmit={handleSubmit} style={styles.form} autoComplete=\"off\">\r\n        <label style={styles.label}>\r\n          Имя\r\n          <input type=\"text\" name=\"name\" value={name} onChange={handleChange} />\r\n        </label>\r\n        <label style={styles.label}>\r\n          Почта\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            value={email}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <label style={styles.label}>\r\n          Пароль\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            value={password}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <Button variant=\"secondary\" size=\"sm\" block type=\"submit\">\r\n          Зарегистрироваться\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}